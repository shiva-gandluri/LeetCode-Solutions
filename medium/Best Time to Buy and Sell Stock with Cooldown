class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        """
        on i'th day
        * buy a stock
         ** only if you have not bought it in the most recent transaction -> isBought = 0
        * sell it
         ** only if you have bought it in the most recent transaction -> isBought = 1
        """
        dp = [[-1] * len(prices) for i in range(2)]
        
        def recursion(i, isBought):
            if i >= len(prices):
                return 0
            
            if dp[isBought][i] != -1:
                return dp[isBought][i]
            
            #if previously (i.e. most recently) bought i.e. isBought = 1 
            if isBought:
                dp[isBought][i] = max(prices[i]+recursion(i+2, 0), recursion(i+1, 1)) # max(sell now and consider cooldown on i+1'th, ignore now)
            else: # if previously (i.e. most recently) sold i.e. isBought = 0
                dp[isBought][i] = max((-1 * prices[i])+recursion(i+1,1), recursion(i+1, 0)) #max(buy now, ignore now)
                
            return dp[isBought][i]
        
        dp[0][0] = recursion(0,0)
        
        return dp[0][0] if dp[0][0] > 0 else 0
